// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.6
// source: main.proto

package authproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthRPC_Login_FullMethodName    = "/authproto.AuthRPC/Login"
	AuthRPC_Register_FullMethodName = "/authproto.AuthRPC/Register"
)

// AuthRPCClient is the client API for AuthRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthRPCClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
}

type authRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthRPCClient(cc grpc.ClientConnInterface) AuthRPCClient {
	return &authRPCClient{cc}
}

func (c *authRPCClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AuthRPC_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AuthRPC_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthRPCServer is the server API for AuthRPC service.
// All implementations must embed UnimplementedAuthRPCServer
// for forward compatibility
type AuthRPCServer interface {
	Login(context.Context, *LoginRequest) (*Response, error)
	Register(context.Context, *RegisterRequest) (*Response, error)
	mustEmbedUnimplementedAuthRPCServer()
}

// UnimplementedAuthRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAuthRPCServer struct {
}

func (UnimplementedAuthRPCServer) Login(context.Context, *LoginRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthRPCServer) Register(context.Context, *RegisterRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthRPCServer) mustEmbedUnimplementedAuthRPCServer() {}

// UnsafeAuthRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthRPCServer will
// result in compilation errors.
type UnsafeAuthRPCServer interface {
	mustEmbedUnimplementedAuthRPCServer()
}

func RegisterAuthRPCServer(s grpc.ServiceRegistrar, srv AuthRPCServer) {
	s.RegisterService(&AuthRPC_ServiceDesc, srv)
}

func _AuthRPC_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRPC_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRPC_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthRPC_ServiceDesc is the grpc.ServiceDesc for AuthRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authproto.AuthRPC",
	HandlerType: (*AuthRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthRPC_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthRPC_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
