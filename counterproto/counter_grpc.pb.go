// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.6
// source: counter.proto

package counterproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CounterRPC_GetValue_FullMethodName = "/counterproto.CounterRPC/GetValue"
	CounterRPC_Update_FullMethodName   = "/counterproto.CounterRPC/Update"
)

// CounterRPCClient is the client API for CounterRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterRPCClient interface {
	GetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type counterRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterRPCClient(cc grpc.ClientConnInterface) CounterRPCClient {
	return &counterRPCClient{cc}
}

func (c *counterRPCClient) GetValue(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CounterRPC_GetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterRPCClient) Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, CounterRPC_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterRPCServer is the server API for CounterRPC service.
// All implementations must embed UnimplementedCounterRPCServer
// for forward compatibility
type CounterRPCServer interface {
	GetValue(context.Context, *Request) (*Response, error)
	Update(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedCounterRPCServer()
}

// UnimplementedCounterRPCServer must be embedded to have forward compatible implementations.
type UnimplementedCounterRPCServer struct {
}

func (UnimplementedCounterRPCServer) GetValue(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedCounterRPCServer) Update(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCounterRPCServer) mustEmbedUnimplementedCounterRPCServer() {}

// UnsafeCounterRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterRPCServer will
// result in compilation errors.
type UnsafeCounterRPCServer interface {
	mustEmbedUnimplementedCounterRPCServer()
}

func RegisterCounterRPCServer(s grpc.ServiceRegistrar, srv CounterRPCServer) {
	s.RegisterService(&CounterRPC_ServiceDesc, srv)
}

func _CounterRPC_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterRPCServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterRPC_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterRPCServer).GetValue(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CounterRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CounterRPC_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterRPCServer).Update(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CounterRPC_ServiceDesc is the grpc.ServiceDesc for CounterRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CounterRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counterproto.CounterRPC",
	HandlerType: (*CounterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _CounterRPC_GetValue_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CounterRPC_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter.proto",
}
